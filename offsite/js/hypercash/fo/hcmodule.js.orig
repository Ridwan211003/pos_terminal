var Hypercash = Hypercash || {};

Hypercash.lastSignatoryId = "";

Hypercash.service = {
	getMarkupRate : function(memberType) {
		var markUpRate = 0;

		switch (memberType) {
			case 'PROFESSIONAL':
				markUpRate = 0;
			case 'NONMEMBER':
				// Use non member markup rate here
				markUpRate = getConfigValue('HC_NON_MEMBER_MARKUP_RATE');
			case 'EMPLOYEE':
				// Use employee markup rate here
				markUpRate = getConfigValue('HC_EMPLOYEE_MARKUP_RATE');
		}

		return markUpRate ? parseFloat(markUpRate) : 0;
	},
	getMarkUpLabel: function(memberType) {
		switch (memberType) {
			case "EMPLOYEE":
				return "pos_receipt_total_emp_markup_label";
			case "NONMEMBER":
				return "pos_receipt_total_non_mem_markup_label";
		}
	},
	
	computeMarkUpWithoutTax: function(item) {
		var markUp = 0;
		var markupPercent = Hypercash.service.getMarkupRate(profCust.memberType);
		var tariffDivisor = 1 + (parseInt(getConfigValue('TAX_RATE')) / 100);

		if (item.isTaxInclusive) {
			//get priceBeforeTax first then deduct total discount
			markUp = ((item.priceSubtotal / tariffDivisor) - item.discountAmount) * markupPercent;
		} else {
			//no need to get priceBeforeTax if item is non-taxable
			markUp = (item.priceSubtotal - item.discountAmount) * markupPercent;
		}

		return markUp;
	},
	
	getMemberTypeForScreen: function() {
		var memberType = "NONMEMBER"; //default value
		if (isHcEnabled) {
			if (profCust && profCust.memberType) {
				memberType = profCust.memberType;
			} else if (saleTx && saleTx.taxInvoice) {
				memberType = saleTx.taxInvoice.memberType;
			}
		}
		
		return memberType;
	},
	
	getStatusCode: function() {
		if (isRevisedTxn) {
			return '1';
		} else if (CRMAccountModule.Hypercash.crmOfflineMode) {
			return '2';
		} else {
			return '0';
		}
	},
	
	findItemsFromOriginalSalesTx: function(barCode, baseTransactionId) {
		var isHTTPStatusOK = false;
		var data = $.ajax({
			url : posWebContextPath + "/product/findItemsFromOriginalSalesTx/" + baseTransactionId + "/" + barCode,
			type : "GET",
			async : false,
			dataTygetItemPriceBeforeTaxpe : "json",
			success : function(data, status) {
				if (!jQuery.isEmptyObject(data) && !data.error) {
					isHTTPStatusOK = true;
					lastBarcodeScanned = barCode;
				    productObj = data;
				}
			},
			error : function(jqXHR, status, error) {
				console.log('Error: ' + error + "\nError Response: " + jqXHR.responseText);
				showMsgDialog(getMsgValue('pos_warning_msg_file_not_found'), "warning");
			}
		}).responseText;

		return (isHTTPStatusOK) ? JSON.parse(data) : null;
	},

	getItemPriceBeforeTax: function(orderItem) {
		return orderItem.isTaxInclusive ? (orderItem.currentPrice / getConfigValue('TAX_TARIFF_DIVISOR')) : (orderItem.currentPrice);
	},

	/*
	 * NOTE: profCust, saleTx, and runningNonMemberMarkup
	 * 		 are global variables declared in cashier.js
	 */
	applyNonMemberMarkup: function(orderItems) {
		if (profCust.memberType != 'PROFESSIONAL' && !toggleTVS && orderItems) {
			saleTx.totalNonMemberMarkup = 0; //always reset saleTx.totalNonMemberMarkup
			var markupPercent = this.getMarkupRate(profCust.memberType);
			var tariffDivisor = 1 + (parseInt(getConfigValue('TAX_RATE')) / 100);

			orderItems.forEach(function(item) {
				if (item.isTaxInclusive) {
					// for items that are tax inclusive, actual formula is:
					// priceBeforeTax => (item.priceSubtotal - item.discountAmount) / tariffDivisor
					// item.nonMemberMarkup => priceBeforeTax * tariffDivisor * markupPercent
					// tariffDivisor will cancel out
					item.nonMemberMarkup = ((item.priceSubtotal - item.discountAmount 
											- (item.secondLayerDiscountAmount ? item.secondLayerDiscountAmount : 0)) 
											* markupPercent);
				} else {
					item.nonMemberMarkup = ((item.priceSubtotal - item.discountAmount 
											- (item.secondLayerDiscountAmount ? item.secondLayerDiscountAmount : 0)) 
											* markupPercent * tariffDivisor);
				}
				
				if (item.isVoided) {
					saleTx.totalNonMemberMarkup -= item.nonMemberMarkup;
				} else {
					saleTx.totalNonMemberMarkup += item.nonMemberMarkup;
				}

				/*if (!saleTx.totalNonMemberMarkup) {
					saleTx.totalNonMemberMarkup = 0;
				}
				
				if (item.isVoided) {
					saleTx.totalNonMemberMarkup -= item.nonMemberMarkup;
					runningNonMemberMarkup -= item.nonMemberMarkup;
				} else { 
					saleTx.totalNonMemberMarkup += item.nonMemberMarkup;
					runningNonMemberMarkup += item.nonMemberMarkup;
				}*/

				console.log('Hypercash.service.applyNonMemberMarkup: ' + JSON.stringify(item));
			});

			saleTx.totalAmount += Math.round(saleTx.totalNonMemberMarkup);
		}
	},

	applyNonMemberMarkupOnReturnItems: function() {
		if (saleTx.totalNonMemberMarkup) {
			saleTx.totalAmount -= Math.round(saleTx.totalNonMemberMarkup);
		}

		saleTx.totalNonMemberMarkup = 0;
		
		if (profCust.memberType != 'PROFESSIONAL') {
			//var markupPercent = parseFloat(getConfigValue('HC_NON_MEMBER_MARKUP_RATE'));
			var markupPercent = this.getMarkupRate(profCust.memberType);
			var tariffDivisor = 1 + (parseInt(getConfigValue('TAX_RATE')) / 100);
			for (var i=0; i<saleTx.orderItems.length; i++) {
				if (saleTx.orderItems[i].isTaxInclusive) {
					saleTx.orderItems[i].nonMemberMarkup = ((saleTx.orderItems[i].priceSubtotal - saleTx.orderItems[i].discountAmount) * markupPercent);
				} else {
					saleTx.orderItems[i].nonMemberMarkup = ((saleTx.orderItems[i].priceSubtotal - saleTx.orderItems[i].discountAmount) * markupPercent * tariffDivisor);
				}

				if (saleTx.orderItems[i].isVoided) {
					saleTx.totalNonMemberMarkup -= saleTx.orderItems[i].nonMemberMarkup;
				} else {
					saleTx.totalNonMemberMarkup += saleTx.orderItems[i].nonMemberMarkup;
				}
			}
		}
	},

	printReturnNote: function() {
		profCust.returnNote.customerNumber = profCust.customerNumber;
		profCust.returnNote.customerName = profCust.customerName;
		profCust.returnNote.businessName = profCust.businessName;
		profCust.returnNote.taxAddress = profCust.taxAddress;
		profCust.returnNote.taxId = profCust.taxId;
		profCust.returnNote.transactionId = saleTx.transactionId;
		profCust.returnNote.returnDate = new Date();
		profCust.returnNote.orderItems = new Array();
		profCust.returnNote.memberType = profCust.memberType;
		
		var totalTaxFromTaxableReturns = 0;
		var totalSellingPriceBeforeTax = 0;
		saleTx.orderItems.forEach(function(item) {
			var orderItem = {};

			orderItem.productId = item.productId;
			orderItem.shortDesc = item.shortDesc;
			orderItem.name = item.name;
			orderItem.quantity = item.quantity;
			orderItem.description = item.description;
			orderItem.ean13Code = item.ean13Code;
			orderItem.priceSubtotal = item.priceSubtotal;

			orderItem.priceUnit = item.isTaxInclusive ? (item.priceUnit / 1.1) : item.priceUnit;
			orderItem.sellingPrice = item.priceSubtotal;
			orderItem.sellingPriceBeforeTax = item.isTaxInclusive ? (item.priceSubtotal / 1.1) : item.priceSubtotal;
			orderItem.isTaxInclusive = item.isTaxInclusive;
			
			profCust.returnNote.orderItems.push(orderItem);
		});

		profCust.returnNote.totalNonMemberMarkup = saleTx.totalNonMemberMarkup;

		/*Hypercash.ajax.printReturnNote(JSON.stringify(profCust.returnNote), function(response) {
			if (!jQuery.isEmptyObject(response) && !response.error) {
				console.log("SUCCESS: " + response);
				endProfCustTxn();
			} else {
				endProfCustTxn();
				promptSysMsg('Failed to to print return note.', 'RETURN');
			}
		}, function(jqXHR, status, error) {
			console.log('FAIL: ' + JSON.stringify(error));
			endProfCustTxn();
			promptSysMsg('Failed to to print return note.', 'RETURN');
		});*/

		return profCust.returnNote;
	},

	promptPrintTaxInvoice: function(callback, orderStatus) {
		if (profCust && profCust.customerNumber && saleTx.type == CONSTANTS.TX_TYPES.SALE.name && orderStatus != CONSTANTS.STATUS.CANCELLED) {
			$("#taxInvoiceSignatory-dialog").dialog('option', 'close',function( event, ui ) {
				if (isTaxInvSeqAvailable) {
					if (profCust.printInvoice && saleTx.taxInvoice) {
						callback();
						endProfCustTxn();
					} else if (profCust.printInvoice == false) {
						//means that the 'NO' button was clicked
						callback();
						endProfCustTxn();
					} else {
						//TODO an error (e.g. server offline) would also mean that the sale will push through, which may not be desired
						callback();
						//endProfCustTxn();
					}
				} else {
					endProfCustTxn();
					CASHIER.newOrder();
				}
			});

			$("#taxInvoiceSignatory-dialog").data("statusCode", this.getStatusCode()).dialog("open");
		} else {
			//Not a prof customer sale txn
			callback();
		}
	},

	promptReprintInvoice: function() {
		$("#taxInvoiceReprint-dialog").dialog('option', 'beforeClose',function( event, ui ) {
			profCust = {};
			isRevisedTxn = false;
			renderCustomerInfo();
		});
		$("#taxInvoiceReprint-dialog").dialog("open");
	},
	
	isThereAvailableTaxInvSequence: function(callBack, errorCallback) {
		Hypercash.ajax.isThereAvailableTaxInvSequence(callBack, errorCallback);
	},
<<<<<<< HEAD
	
	enterCustomerInformation: function() {
		$("#nonMemberInfo-dialog").dialog("open");
	},
	
	getLastSignatoryId: function() {
		var value = "";

		if (Hypercash.lastSignatoryId.trim() != "") {
			value = Hypercash.lastSignatoryId;
		} else if ($("#lastSignatoryId").val().trim() != "") {
			value = $("#lastSignatoryId").val();
		}
		
		return value;
	},
	
	/**
	 * Returns the purchased quantity (ORIG_QTY), quantities that were returned (RETURNED_QTY),
	 * and remaining quantity that is allowed to be returned (NET_QTY)
	 */
	getQuantityInformationByEan13Code: function(ean13Code) {
		var qtyInfo = {};

		if (profCust && profCust.returnNote 
			&& profCust.returnNote.quantityInformation
			&& profCust.returnNote.quantityInformation[ean13Code]) {
			qtyInfo = profCust.returnNote.quantityInformation[ean13Code];
		}

		return qtyInfo;
	},

	/**
	 * Checks specified quantity vs. purchased quantity if still allowed to be returned.
	 */
	isAllowedToBeReturned: function(orderItems, ean13Code, quantity) {
		var isAllowed = false;
		var currentQty = Hypercash.util.getTotalValidQuantityByBarcode(orderItems, ean13Code);
		var qtyInfo = this.getQuantityInformationByEan13Code(ean13Code);

		if (!jQuery.isEmptyObject(qtyInfo)) {
			if (qtyInfo.NET_QTY >= (currentQty + quantity)) {
				isAllowed = true;
			}
		}

		return isAllowed;
	},
=======
>>>>>>> 1.4-snapshot

	/*
	 * Place here logic to be done before Hypercash transaction will be saved.
	 * Process(es) with corresponding to TRANSACTION TYPE.
	 */
	preProcessHypercashTxn: function() {
		if (isHcEnabled) {
			if (saleTx.type == CONSTANTS.TX_TYPES.SALE.name) {
				//place pre-steps before saving HC SALE transaction
			} else if (saleTx.type == CONSTANTS.TX_TYPES.RETURN.name) {
				if (saleTx.returnNote) {
					delete saleTx.returnNote.comparableDate;
<<<<<<< HEAD
					delete saleTx.returnNote.quantityInformation;
				}
			}
		}
	},

	autoTagCustomerAsNonMember: function() {
		var autoTag = getConfigValue("HC_AUTO_TAG_NON_MEMBER");
		/*
		 * If Hypercash counter, tag customer as non-member after scanning n no. of items.
		 */
		if (autoTag && parseBoolean(autoTag)) {
			if (isHcEnabled && jQuery.isEmptyObject(profCust) 
			&& saleTx.type == CONSTANTS.TX_TYPES.SALE.name
			&& saleTx.orderItems) {
				var noOfScan = getConfigValue("HC_NO_OF_SCAN_TO_AUTO_TAG") ? getConfigValue("HC_NO_OF_SCAN_TO_AUTO_TAG") : 2; //default to 2

				if (saleTx.orderItems.length == noOfScan) {
					CRMAccountModule.retriever.findAccountId(getConfigValue("HC_NON_MEMBER_DEF_CARDNO"));
=======
>>>>>>> 1.4-snapshot
				}
			}
		}
	}
};

Hypercash.util = {
	fnApplyCurrencyFormat: function(x) {
		return (x ? Math.round(x).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","):"0");
	},
	
	getTotalValidQuantityByBarcode: function(orderItems, ean13Code) {
		var qty = 0;

		if (orderItems && !jQuery.isEmptyObject(orderItems)) {
			orderItems.forEach(function(item) {
				if (item.ean13Code == ean13Code) {
					if (item.isVoided && qty > 0) {
						qty -= item.quantity; //deduct voided items
					} else {
						qty += item.quantity;
					}
				}
			});
		}

		return qty;
	},

	/*
	 * Checks if list of payment media types contains at least (1) eft payment media type
	 * @paymentMediaTypes list of payment media types (e.g. saleTx.payments).
	 */
	hasEFTPayment: function(paymentMediaTypes) {
		var hasEft = false;

		if (paymentMediaTypes) {
			paymentMediaTypes.forEach(function(paymentMedia) {
				if (paymentMedia.paymentMediaType != CONSTANTS.PAYMENT_MEDIA_TYPES.CASH.name) {
					hasEft = true;
					return;
				}
			});
		}

		return hasEft;
	}
};

/**
*	This object contains Hypercash specific printing methods and properties
*	This module's objects are used to enable printing of hypercash transaction receipts
* 	depending on transaction type and other factors.
*/
Hypercash.printer = {

	/**
	* For EFT card payments, only these items will be considered when printing receipt
	*/
	EFT_PAYMENT_MEDIA_TO_PRINT : [
		CONSTANTS.PAYMENT_MEDIA_TYPES.EFT_ONLINE.name, 
		CONSTANTS.PAYMENT_MEDIA_TYPES.DEBIT.name, 
		CONSTANTS.PAYMENT_MEDIA_TYPES.EDC_PAYMENT.name,
		CONSTANTS.PAYMENT_MEDIA_TYPES.CMC_EFT_ONLINE.name,
		CONSTANTS.PAYMENT_MEDIA_TYPES.CMC_EFT_OFFLINE.name,
		CONSTANTS.PAYMENT_MEDIA_TYPES.EDC_BCA.name,
		CONSTANTS.PAYMENT_MEDIA_TYPES.EFT_OFFLINE.name
	],
	/**
	*	@param paymentMediaTypes passed from CASHIER.executePayment function. Indicates payment media types used.
	*	@param dataToPrint contains original receipt details to print
	*/
	printTransactionBasedOnMediaPaymentType : function(paymentMediaTypes, dataToPrint) {
		if ((saleTx.type == CONSTANTS.TX_TYPES.RETURN.name || saleTx.type == CONSTANTS.TX_TYPES.REFUND.name) 
			|| Hypercash.util.hasEFTPayment(paymentMediaTypes)) {
			this.printTransactionWithHeaderAndBody(dataToPrint);
		}
	},

	/**
	* This function adds header and body parameters to original receipt details
	*	@param dataToPrint original sale transaction object for printing
	*/
	printTransactionWithHeaderAndBody : function(dataToPrint){
		printReceipt($.extend({	
			header : setReceiptHeader(saleTx),
			body: setReceiptItems(saleTx, saleTx.orderItems, { currency : "Rp" }),
			isHypercashPrint : true
		}, dataToPrint));
	}
};

