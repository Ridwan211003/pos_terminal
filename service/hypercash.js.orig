/**
 * @author odelapena 
 * Hypercash Module to receive incoming hypercash processes.
 * Exports printDoc function to call printer specified.
 */

var epsonprinter = require("../devices/hypercash/epsonprinter.js");
var taxInvoiceService = require("../devices/hypercash/taxInvoiceService.js");
var returnNoteService = require("../devices/hypercash/returnNoteService.js");
var configuration;

exports.printDoc = function(type, data){
	// Use global configuration object
	if(!configuration){
		configuration = global.configuration_poss;
	}
	console.log("type = " + type);
	switch (type){
		case 'PRINT_TAX_INVOICE':
			printTaxInvoice(data);
			break;
		case 'REPRINT_TAX_INVOICE':
			reprintTaxInvoice(data);
			break;
		case 'PRINT_RETURN_NOTE':
			printReturnNote(data);
			break;
	}
};

function printTaxInvoice(txnObj){
	console.log('Printing tax invoice in hypercash.js');
	
	printTaxInvoice(txnObj);
};

function reprintTaxInvoice(taxInvoice) {
	createOrderItems(taxInvoice, taxInvoice.txnItems);	
	groupSimilarProducts(taxInvoice);

	var totalSellingPriceBeforeTax = getTotalSellingPriceBeforeTax(taxInvoice.orderItems, taxInvoice.totalNonMemberMarkup);
	taxInvoice.totalSellingPriceBeforeTax = totalSellingPriceBeforeTax.totalSellingPriceBeforeTax;
	taxInvoice.totalSellingPriceNonTaxable = totalSellingPriceBeforeTax.totalSellingPriceNonTaxable;
	taxInvoice.totalSellingPriceTaxable = totalSellingPriceBeforeTax.totalSellingPriceTaxable;
	taxInvoice.totalNonMemberMarkupTaxable = taxInvoice.totalNonMemberMarkup ? getTaxableAmount(taxInvoice.totalNonMemberMarkup)  : 0;
	
	console.log("taxInvoice.totalSellingPriceBeforeTax = " + taxInvoice.totalSellingPriceBeforeTax );
	console.log("taxInvoiceTaxAndSellingPriceItems.totalSellingPriceNonTaxable = " + taxInvoice.totalSellingPriceNonTaxable );
	console.log("totalSellingPriceBeforeTax.totalSellingPriceTaxable = " + taxInvoice.totalSellingPriceTaxable );
	
	taxInvoice.totalTax = getTotalTax(taxInvoice.orderItems, taxInvoice.totalNonMemberMarkup);

	//Add MDR surcharge on total amount taxed
	taxInvoice.totalAmtTaxed = Math.ceil(taxInvoice.totalSellingPriceBeforeTax + taxInvoice.totalTax + taxInvoice.totalMdrSurcharge);
	
	console.log("taxInvoice.totalTax = " + taxInvoice.totalTax );
	taxInvoice.cashierId = taxInvoice.issuerId;

<<<<<<< HEAD
=======
	
>>>>>>> 1.3.6
	taxInvoice.taxName = taxInvoice.taxName ? taxInvoice.taxName : taxInvoice.customerName ?  taxInvoice.customerName  : ' ';
	setTaxInvoiceAddressAndBusinessName(taxInvoice);

	taxInvoice.sumSellingPriceTaxable = Math.ceil(taxInvoice.totalSellingPriceTaxable + taxInvoice.totalNonMemberMarkupTaxable);
	taxInvoice.sumPPN = Math.floor(taxInvoice.totalTax);
	taxInvoice.sumSellingPricePlusTax = taxInvoice.totalSellingPriceTaxable + taxInvoice.totalTax + taxInvoice.totalNonMemberMarkupTaxable;

	taxInvoice.grandHarga = taxInvoice.totalSellingPriceTaxable + taxInvoice.totalSellingPriceNonTaxable + taxInvoice.totalNonMemberMarkupTaxable;
	taxInvoice.grandPPN = Math.floor(taxInvoice.totalTax);
	taxInvoice.grandTotalHarga = taxInvoice.totalSellingPriceTaxable + taxInvoice.totalSellingPriceNonTaxable + taxInvoice.totalTax + taxInvoice.totalNonMemberMarkupTaxable;

	//Post Rounding
	taxInvoice.totalSellingPriceBeforeTax = Math.ceil(taxInvoice.totalSellingPriceBeforeTax);
	taxInvoice.totalTax = Math.floor(taxInvoice.totalTax);

	taxInvoice.reprint = true;

	//epsonprinter.reprintTaxInvoice(taxInvoice);

	applyFormatToTaxInvoice(taxInvoice);
	extractTaxInvoiceData(taxInvoice);
	taxInvoice.fileName = taxInvoice.invoiceNumber + ".pdf";
	taxInvoiceService.printTaxInvoice(taxInvoice, epsonprinter.printFile);
};

function printReturnNote(returnTxn) {
	createOrderItems(returnTxn, returnTxn.orderItems);

	var totalSellingPriceBeforeTax = getTotalSellingPriceBeforeTax(returnTxn.orderItems, returnTxn.totalNonMemberMarkup);	

	returnTxn.totalSellingPriceBeforeTax = totalSellingPriceBeforeTax.totalSellingPriceBeforeTax;
	returnTxn.totalSellingPriceNonTaxable = totalSellingPriceBeforeTax.totalSellingPriceNonTaxable;
	returnTxn.totalSellingPriceTaxable = totalSellingPriceBeforeTax.totalSellingPriceTaxable;
	
	returnTxn.totalNonMemberMarkupTaxable = returnTxn.totalNonMemberMarkup ? getTaxableAmount(returnTxn.totalNonMemberMarkup) : 0;
	returnTxn.totalTax = getTotalTax(returnTxn.orderItems, returnTxn.totalNonMemberMarkup);
	returnTxn.totalAmount = Math.ceil(returnTxn.totalSellingPriceBeforeTax + returnTxn.totalTax);

	returnTxn.sumSellingPriceTaxable = Math.ceil(returnTxn.totalSellingPriceTaxable + returnTxn.totalNonMemberMarkupTaxable);
	returnTxn.sumPPN = Math.floor(returnTxn.totalTax);
	returnTxn.sumSellingPricePlusTax = returnTxn.totalSellingPriceTaxable + returnTxn.totalTax + returnTxn.totalNonMemberMarkupTaxable;

	//Post Rounding
	returnTxn.totalSellingPriceBeforeTax = Math.ceil(returnTxn.totalSellingPriceBeforeTax);
	returnTxn.totalTax = Math.floor(returnTxn.totalTax);

	setTaxInvoiceAddressAndBusinessName(returnTxn);
	applyFormatToReturnNote(returnTxn);
	extractReturnNoteData(returnTxn);
	returnTxn.fileName = returnTxn.returnNoteNumber + ".pdf";
	returnNoteService.printReturnNote(returnTxn, epsonprinter.printFile);
	
	//epsonprinter.printReturnNote(returnTxn);
};

function printTaxInvoice(saleTxn) {
	var taxInvoice = {};
	taxInvoice.invoiceNumber = saleTxn.taxInvoice.invoiceNumber;
	taxInvoice.transactionId = saleTxn.transactionId;
	taxInvoice.dateIssued = saleTxn.taxInvoice.dateIssued;
	taxInvoice.signatoryFullName = saleTxn.taxInvoice.signatoryFullName;
	taxInvoice.customerNumber = saleTxn.taxInvoice.customerNumber;
	taxInvoice.cashierId = saleTxn.userName;
	taxInvoice.taxId = saleTxn.taxInvoice.taxId;
	taxInvoice.taxName = saleTxn.taxInvoice.taxName ? saleTxn.taxInvoice.taxName : saleTxn.taxInvoice.customerName ? saleTxn.taxInvoice.customerName : ' ';
	taxInvoice.memberType = saleTxn.taxInvoice.memberType;

	console.log('totalAmountPaid = ' + saleTxn.totalAmountPaid);
	console.log('totalChange = ' + saleTxn.totalChange);
	console.log('dateIssued = ' + taxInvoice.dateIssued);
	
	taxInvoice.totalAmountPaid = saleTxn.totalAmountPaid;
	taxInvoice.totalChange = saleTxn.totalChange;
	if (taxInvoice.customerNumber == configuration.properties['HC_NON_MEMBER_DEF_CARDNO'] || taxInvoice.taxId == '00.000.000.0-000.000') {
		taxInvoice.businessName = '';
		taxInvoice.taxAddress = '';
	} else {
		taxInvoice.businessName = saleTxn.taxInvoice.businessName;
		taxInvoice.taxAddress = saleTxn.taxInvoice.taxAddress;
	}
	taxInvoice.totalQuantity = saleTxn.totalQuantity;
	taxInvoice.totalNonMemberMarkup = saleTxn.totalNonMemberMarkup ? saleTxn.totalNonMemberMarkup : 0;
	taxInvoice.totalNonMemberMarkupTaxable = saleTxn.totalNonMemberMarkup ? getTaxableAmount(saleTxn.totalNonMemberMarkup) : 0;
	
	createOrderItems(taxInvoice, saleTxn.orderItems);
	groupSimilarProducts(taxInvoice);
	
	var totalSellingPriceBeforeTax = getTotalSellingPriceBeforeTax(taxInvoice.orderItems, taxInvoice.totalNonMemberMarkup);
	taxInvoice.totalSellingPriceBeforeTax = totalSellingPriceBeforeTax.totalSellingPriceBeforeTax;
	taxInvoice.totalSellingPriceNonTaxable = totalSellingPriceBeforeTax.totalSellingPriceNonTaxable;
	taxInvoice.totalSellingPriceTaxable = totalSellingPriceBeforeTax.totalSellingPriceTaxable;
	taxInvoice.totalTax = getTotalTax(taxInvoice.orderItems, taxInvoice.totalNonMemberMarkup);
	taxInvoice.totalAmount = saleTxn.totalAmount;
	taxInvoice.totalAmountPaid = saleTxn.totalAmountPaid;
	taxInvoice.totalChange = saleTxn.totalChange;

	//Add MDR surcharge on total amount taxed
	taxInvoice.totalAmtTaxed = Math.ceil(taxInvoice.totalSellingPriceBeforeTax + taxInvoice.totalTax + saleTxn.totalMdrSurcharge);

	taxInvoice.sumSellingPriceTaxable = Math.ceil(taxInvoice.totalSellingPriceTaxable + taxInvoice.totalNonMemberMarkupTaxable);
	taxInvoice.sumPPN = Math.floor(taxInvoice.totalTax);
	taxInvoice.sumSellingPricePlusTax = taxInvoice.totalSellingPriceTaxable + taxInvoice.totalTax + taxInvoice.totalNonMemberMarkupTaxable;

	taxInvoice.grandHarga = taxInvoice.totalSellingPriceTaxable + taxInvoice.totalSellingPriceNonTaxable + taxInvoice.totalNonMemberMarkupTaxable;
	taxInvoice.grandPPN = Math.floor(taxInvoice.totalTax);
	taxInvoice.grandTotalHarga = taxInvoice.totalSellingPriceTaxable + taxInvoice.totalSellingPriceNonTaxable + taxInvoice.totalTax + taxInvoice.totalNonMemberMarkupTaxable;

	//Post Rounding
	taxInvoice.totalSellingPriceBeforeTax = Math.ceil(taxInvoice.totalSellingPriceBeforeTax);
	taxInvoice.totalTax = Math.floor(taxInvoice.totalTax);

	//epsonprinter.printTaxInvoice(taxInvoice);
	
	console.log('************************total mdr surcharge: '+saleTxn.totalMdrSurcharge);
	setTaxInvoiceAddressAndBusinessName(taxInvoice);
	applyFormatToTaxInvoice(taxInvoice);
	extractTaxInvoiceData(taxInvoice);
	taxInvoice.fileName = taxInvoice.invoiceNumber + ".pdf";
	taxInvoiceService.printTaxInvoice(taxInvoice, epsonprinter.printFile);
}

function createOrderItems(taxInvoice, txnItems) {
	var orderItemsList = new Array();
	var voidedItemsList = new Array();
	taxInvoice.orderItems = new Array();		
	
	// Iterate over all txnItems separating voided and non-voided transactions
	txnItems.forEach(function(item){
		// instantiate orderItem
		var orderItem = {};
		
		// Assign preliminary values
		orderItem.productId = item.productId;
        orderItem.shortDesc = item.shortDesc;
        orderItem.name = item.name;
        orderItem.quantity = item.quantity;
        orderItem.description = item.description;
        orderItem.ean13Code = item.ean13Code;
        if(item.discountAmount && item.discountAmount > 0) {
            orderItem.discountAmount = item.discountAmount;
		}
		orderItem.discBtnAmount = (item.discBtnAmount ? item.discBtnAmount : 0);
        
		if(item.isVoided){
			// Add to voidedItemsList
			// Will cancel out orderItemsList
			voidedItemsList.push(orderItem);
		} else {
			orderItem.unitPrice = item.priceSubtotal / item.quantity;
			orderItem.secondLayerDiscountAmount = (item.secondLayerDiscountAmount ? item.secondLayerDiscountAmount : 0);
			orderItem.memberDiscountAmount = (item.memberDiscountAmount ? item.memberDiscountAmount : 0);
			orderItem.isTaxInclusive = item.isTaxInclusive;
			orderItem.nonMemberMarkup = item.nonMemberMarkup;
			// Add to orderItemsList i.e.,
			// Candidate for checkout
			orderItemsList.push(orderItem);
		}
	});
	// Iterate over the voided Items list
	// to deduct quantity from voidable entries
	voidedItemsList.forEach(function(voidedItem){
		var done = false;
		for(var i=0; i<orderItemsList.length && !done; i++) {
			var orderItem = orderItemsList[i];
            if(voidedItem.productId == orderItem.productId) {
            	// If true, remove record from candidate list
            	if(voidedItem.quantity == orderItem.quantity){
            		console.log('item.quantity == invItem.quantity');
            		orderItemsList.splice(i, 1);
            		done = true;
            	}
            	// If true, decrement orderItem quantity
            	else if (voidedItem.quantity < orderItem.quantity){
            		console.log('item.quantity < invItem.quantity');
            		orderItem.quantity -= voidedItem.quantity;
            		orderItem.discountAmount -= voidedItem.discountAmount;
            		orderItem.discBtnAmount -= voidedItem.discBtnAmount;
            		//TODO: Should other discounts get deducted here?
            		done = true;
            	} 
            	// If true, decrement voidedItem quantity and
            	// remove record from candidate list
            	else if (voidedItem.quantity > orderItem.quantity) {
            		console.log('item.quantity > invItem.quantity');
            		voidedItem.quantity -= orderItem.quantity;
            		voidedItem.discountAmount -= orderItem.discountAmount;
            		voidedItem.discBtnAmount -= orderItem.discBtnAmount;
            		//TODO: Should other discounts get deducted here?
            		orderItemsList.splice(i--, 1);
            	}
            }
		}
	});

	orderItemsList.forEach(function(orderItem){
		console.log(JSON.stringify(orderItem));
		orderItem.priceSubtotal = orderItem.quantity * orderItem.unitPrice;
		orderItem.sellingPrice = getItemSellingPrice(orderItem);
		orderItem.sellingPriceBeforeTax = getItemSellingPriceBeforeTax(orderItem.isTaxInclusive, orderItem.sellingPrice);
		orderItem.tax = getTaxForItem(orderItem.isTaxInclusive, orderItem.sellingPriceBeforeTax);
		taxInvoice.orderItems.push(orderItem);
	});
}

function getItemSellingPrice(orderItem) {
	return orderItem.priceSubtotal
				- (orderItem.discountAmount ? orderItem.discountAmount : 0)
				- (orderItem.secondLayerDiscountAmount ? orderItem.secondLayerDiscountAmount : 0)
				- (orderItem.memberDiscountAmount ? orderItem.memberDiscountAmount : 0)
				- (orderItem.discBtnAmount ? orderItem.discBtnAmount : 0);
}

function getItemSellingPriceBeforeTax(isTaxInclusive, sellingPrice) {
	return isTaxInclusive ? (sellingPrice /  configuration.properties['TAX_TARIFF_DIVISOR']) : (sellingPrice);
}

function getTotalTax(orderItems, totalNonMemberMarkup){
	/** Compute for total tax and sellingPriceTaxable and sellingPriceNonTaxable
	 * 
	*/
	var totalTax = 0;
	orderItems.forEach(function(orderItem){
		totalTax += orderItem.tax;
	});
	if(totalNonMemberMarkup){
		totalTax += ((totalNonMemberMarkup * (configuration.properties['TAX_RATE'] /100) / 1.1));			
	}
	return totalTax;
}

/**
 * Get total amount of selling price beforeTax 
 */
function getTotalSellingPriceBeforeTax(orderItems, totalNonMemberMarkup){
	var totalSellingPriceBeforeTax = 0;
	var totalSellingPriceNonTaxable = 0;
	var totalSellingPriceTaxable  = 0;
	orderItems.forEach(function(orderItem){
		totalSellingPriceBeforeTax += orderItem.sellingPriceBeforeTax;
		if(orderItem.isTaxInclusive){
			totalSellingPriceTaxable += orderItem.sellingPriceBeforeTax;
		} else{
			totalSellingPriceNonTaxable += orderItem.sellingPriceBeforeTax;
		}		
	});
	if(totalNonMemberMarkup){
		totalSellingPriceBeforeTax += getTaxableAmount(totalNonMemberMarkup);
	}
	return {
		totalSellingPriceBeforeTax: totalSellingPriceBeforeTax, 
		totalSellingPriceNonTaxable : totalSellingPriceNonTaxable,
		totalSellingPriceTaxable : totalSellingPriceTaxable
	};
}

function getTaxForItem(isTaxInclusive, sellingPrice){
	return isTaxInclusive ? (sellingPrice * configuration.properties['HC_TAX_INVOICE_VAT_RATE']) : 0;
}

function setTaxInvoiceAddressAndBusinessName(taxInvoice){
	if(taxInvoice.customerNumber && taxInvoice.customerNumber === configuration.properties['HC_NON_MEMBER_DEF_CARDNO'] ||
			taxInvoice.taxId && taxInvoice.taxId === '00.000.000.0-000.000'){
		taxInvoice.businessName = ' ';
		taxInvoice.taxAddress = ' ';
		taxInvoice.taxId = '00.000.000.0-000.000';
	} else {
		taxInvoice.businessName = !taxInvoice.businessName ? ' ' : taxInvoice.businessName;
		taxInvoice.taxAddress = !taxInvoice.taxAddress ? ' ' : taxInvoice.taxAddress;
		taxInvoice.taxId = !taxInvoice.taxId ? ' ' : taxInvoice.taxId;
	}
}

function getTaxableAmount(price) {
	return price / configuration.properties['TAX_TARIFF_DIVISOR'];
}

function groupSimilarProducts(taxInvoice) {
	taxInvoice.groupedOrderItems = new Array();
	var clonedList = taxInvoice.orderItems,
		groupedList = {},
		finalList = {},
		item,
		gItems,
		finalItem,
		i;

	//group first similar items then insert to 2D array
	for (i = 0; i < clonedList.length; i++) {
		item = clonedList[i];

		//if not yet existing, create an empty list
		if (!(item.productId in groupedList)) {
			groupedList[item.productId] = [];
		}

		groupedList[item.productId].push(item);
	}

	//combine similar items into one entry in array
	for (var key in groupedList) {
		finalItem = {};
		gItems = groupedList[key];

		for (i = 0; i < gItems.length; i++) {
			item = gItems[i];

			//console.log("item: ", item);

			//load this info only once
			if (i == 0) {
				finalItem.productId = item.productId;
				finalItem.shortDesc = item.shortDesc;
				finalItem.name = item.name;
				finalItem.quantity = item.quantity;
				finalItem.priceSubtotal = item.priceSubtotal;
				finalItem.sellingPrice = item.sellingPrice;
				finalItem.sellingPriceBeforeTax = item.sellingPriceBeforeTax;
				finalItem.tax = item.tax;
				finalItem.ean13Code = item.ean13Code;
				finalItem.description = item.description;
				finalItem.isTaxInclusive = item.isTaxInclusive;
			} else {
				finalItem.quantity += item.quantity;
				finalItem.sellingPrice += item.sellingPrice;
				finalItem.sellingPriceBeforeTax += item.sellingPriceBeforeTax;
			}
		}

		//console.log("finalItem: ", finalItem);

		taxInvoice.groupedOrderItems.push(finalItem);
	}
}

function applyCurrencyFormat(x) {
	return (x ? Math.round(x).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","):"0");
}

function applyInvoiceDateFormat(date) {
	var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
	var d = new Date(date);
	return d.getDate() + ' ' + months[d.getMonth()] + ' ' + d.getFullYear();
}

function applyInvoiceTimeFormat(date) {
	var d = new Date(date);
	return ('0' + d.getHours()).slice(-2) + ':' + ('0' + d.getMinutes()).slice(-2);
}

function applyReturnDateFormat(date) {
	var d = date ? new Date(date) : new Date();
	return (d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear();
}

function applyPurchaseDateFormat(date) {
	var d = new Date(date);
	return d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();
}

function getMarkupLabelForTaxInvoice(memberType) {
	switch (memberType) {
		case "EMPLOYEE":
			return "Total Employee Mark Up";
		default:
			return "Total Non Member Mark Up";
	}	
}

function getMarkupLabelForReturnNote(memberType) {
	switch (memberType) {
		case "EMPLOYEE":
			return "Employee Mark Up";
		default:
			return "Biaya Non Member";
	}	
}

function applyFormatToTaxInvoice(taxInvoice) {
	taxInvoice.formattedDateIssued = applyInvoiceDateFormat(taxInvoice.dateIssued); //Tanggal / Tgl. Pembelian
	taxInvoice.formattedTimeIssued = applyInvoiceTimeFormat(taxInvoice.dateIssued); //Jam

	taxInvoice.markupLabel = getMarkupLabelForTaxInvoice(taxInvoice.memberType); // Mark Up Label (conditional)
	taxInvoice.totalNonMemberMarkupTaxable = applyCurrencyFormat(taxInvoice.totalNonMemberMarkupTaxable); //Total Employee / Non Member Mark Up
	taxInvoice.totalSellingPriceBeforeTax = applyCurrencyFormat(taxInvoice.totalSellingPriceBeforeTax); //Harga Jual
	taxInvoice.totalTax = applyCurrencyFormat(taxInvoice.totalTax); //PPN / GRAND TOTAL, PPN
	taxInvoice.totalAmtTaxed = applyCurrencyFormat(taxInvoice.totalAmtTaxed); //Total Yang Harus Dibayar
	taxInvoice.totalAmountPaid = applyCurrencyFormat(taxInvoice.totalAmountPaid); //Total media payment
	taxInvoice.totalChange = applyCurrencyFormat(taxInvoice.totalChange); //Kembalian
	
	taxInvoice.sumSellingPriceTaxable = applyCurrencyFormat(taxInvoice.sumSellingPriceTaxable); //Barang & Jasa Kona Pajak*, HARGA
	taxInvoice.sumPPN = applyCurrencyFormat(taxInvoice.sumPPN); ////Barang & Jasa Kona Pajak*, PPN
	taxInvoice.sumSellingPricePlusTax = applyCurrencyFormat(taxInvoice.sumSellingPricePlusTax); //Barang & Jasa Kona Pajak*, TOTAL HARGA
	console.log('************************total amt taxed: '+taxInvoice.totalAmtTaxed);
	console.log('************************total amt paid: '+taxInvoice.totalAmountPaid);

	taxInvoice.totalSellingPriceNonTaxable = applyCurrencyFormat(taxInvoice.totalSellingPriceNonTaxable); //Bukan Barang Kona Pajak & Jasa Kona Pajak*

	taxInvoice.grandHarga = applyCurrencyFormat(taxInvoice.grandHarga); //GRAND TOTAL, HARGA
	taxInvoice.grandTotalHarga = applyCurrencyFormat(taxInvoice.grandTotalHarga); //GRAND TOTAL, TOTAL HARGA
}

function applyFormatToReturnNote(returnNote) {
	returnNote.purchaseDate = applyPurchaseDateFormat(returnNote.purchaseDate);
	returnNote.returnDate = applyReturnDateFormat(returnNote.returnDate);

	returnNote.markupLabel = getMarkupLabelForReturnNote(returnNote.memberType); //Mark Up Label (conditional)
	returnNote.totalNonMemberMarkupTaxable = applyCurrencyFormat(returnNote.totalNonMemberMarkupTaxable); //Total Employee / Non Member Mark Up
	
	returnNote.totalSellingPriceBeforeTax = applyCurrencyFormat(returnNote.totalSellingPriceBeforeTax); //Jumlah Harga Jual BKP yang dikembalikan / Total Harga Jual BKP setelah Potongan Harga yang dikembalikan
	returnNote.totalTax = applyCurrencyFormat(returnNote.totalTax); //PPN yang diminta kembali
	returnNote.totalAmount = applyCurrencyFormat(returnNote.totalAmount); //Total yang harus dikembalikan

	returnNote.sumSellingPriceTaxable = applyCurrencyFormat(returnNote.sumSellingPriceTaxable); //Barang & Jasa Kena Pajak*, HARGA
	returnNote.sumPPN = applyCurrencyFormat(returnNote.sumPPN); //Barang & Jasa Kena Pajak*, PPN
	returnNote.sumSellingPricePlusTax = applyCurrencyFormat(returnNote.sumSellingPricePlusTax); //Barang & Jasa Kena Pajak*, TOTAL HARGA

	returnNote.totalSellingPriceNonTaxable = applyCurrencyFormat(returnNote.totalSellingPriceNonTaxable); //Bukan barang kena pajak
}

function extractTaxInvoiceData(taxInvoice) {
	taxInvoice.data = [];
	
	for (var i = 0; i < taxInvoice.groupedOrderItems.length; i++) {
		var item = taxInvoice.groupedOrderItems[i];

		taxInvoice.data.push({number: i+1, 
							  description: item.description ? item.description : item.shortDesc,
							  quantity: item.quantity,
							  price: applyCurrencyFormat(item.sellingPriceBeforeTax / item.quantity),
							  subtotal: applyCurrencyFormat(item.sellingPriceBeforeTax),
							  isTaxInclusive: item.isTaxInclusive,
							  common: 1, //any value, this will be used for groupBy if no grouping to be applied
							  ean13Code: item.ean13Code
							});
	}
}

function extractReturnNoteData(returnNote) {
	returnNote.data = [];
	
	for (var i = 0; i < returnNote.orderItems.length; i++) {
		var item = returnNote.orderItems[i];

		returnNote.data.push({number: i+1, 
							  description: item.description ? item.description : item.shortDesc,
							  quantity: item.quantity,
							  price: applyCurrencyFormat(item.sellingPriceBeforeTax / item.quantity),
							  subtotal: applyCurrencyFormat(item.sellingPriceBeforeTax),
							  isTaxInclusive: item.isTaxInclusive,
							  common: 1, //any value, this will be used for groupBy if no grouping to be applied
							  ean13Code: item.ean13Code
							});
	}

	//add mark up
	returnNote.data.push({
		number: "", 
	  	description: returnNote.markupLabel,
	  	quantity: "",
	  	price: "",
	  	subtotal: returnNote.totalNonMemberMarkupTaxable,
	  	isTaxInclusive: true,
	  	common: 1, //any value, this will be used for groupBy if no grouping to be applied
	  	ean13Code: ""
	});
}
